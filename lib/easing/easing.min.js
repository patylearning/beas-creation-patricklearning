(function (n) {
  if (typeof define === "function" && define.amd) {
      define(["jquery"], function (e) {
          return n(e);
      });
  } else if (typeof module === "object" && typeof module.exports === "object") {
      exports = n(require("jquery"));
  } else {
      n(jQuery);
  }
})(function (n) {
  function bounceEase(n) {
      var e = 7.5625, t = 2.75;
      return n < 1 / t ? e * n * n :
          n < 2 / t ? e * (n -= 1.5 / t) * n + 0.75 :
          n < 2.5 / t ? e * (n -= 2.25 / t) * n + 0.9375 :
          e * (n -= 2.625 / t) * n + 0.984375;
  }

  if (typeof n.easing !== "undefined") {
      n.easing.jswing = n.easing.swing;
  }

  var pow = Math.pow,
      sqrt = Math.sqrt,
      sin = Math.sin,
      cos = Math.cos,
      pi = Math.PI,
      c1 = 1.70158,
      c2 = 1.525 * c1,
      s1 = 2 * pi / 3,
      s2 = 2 * pi / 4.5;

  n.extend(n.easing, {
      def: "easeOutQuad",
      swing: function (e) {
          return n.easing[n.easing.def](e);
      },
      easeInQuad: function (n) {
          return n * n;
      },
      easeOutQuad: function (n) {
          return 1 - (1 - n) * (1 - n);
      },
      easeInOutQuad: function (n) {
          return n < 0.5 ? 2 * n * n : 1 - pow(-2 * n + 2, 2) / 2;
      },
      easeInCubic: function (n) {
          return n * n * n;
      },
      easeOutCubic: function (n) {
          return 1 - pow(1 - n, 3);
      },
      easeInOutCubic: function (n) {
          return n < 0.5 ? 4 * n * n * n : 1 - pow(-2 * n + 2, 3) / 2;
      },
      easeInQuart: function (n) {
          return n * n * n * n;
      },
      easeOutQuart: function (n) {
          return 1 - pow(1 - n, 4);
      },
      easeInOutQuart: function (n) {
          return n < 0.5 ? 8 * n * n * n * n : 1 - pow(-2 * n + 2, 4) / 2;
      },
      easeInQuint: function (n) {
          return n * n * n * n * n;
      },
      easeOutQuint: function (n) {
          return 1 - pow(1 - n, 5);
      },
      easeInOutQuint: function (n) {
          return n < 0.5 ? 16 * n * n * n * n * n : 1 - pow(-2 * n + 2, 5) / 2;
      },
      easeInSine: function (n) {
          return 1 - cos(n * pi / 2);
      },
      easeOutSine: function (n) {
          return sin(n * pi / 2);
      },
      easeInOutSine: function (n) {
          return -(cos(pi * n) - 1) / 2;
      },
      easeInExpo: function (n) {
          return n === 0 ? 0 : pow(2, 10 * n - 10);
      },
      easeOutExpo: function (n) {
          return n === 1 ? 1 : 1 - pow(2, -10 * n);
      },
      easeInOutExpo: function (n) {
          return n === 0 ? 0 : n === 1 ? 1 : n < 0.5 ? pow(2, 20 * n - 10) / 2 : (2 - pow(2, -20 * n + 10)) / 2;
      },
      easeInCirc: function (n) {
          return 1 - sqrt(1 - pow(n, 2));
      },
      easeOutCirc: function (n) {
          return sqrt(1 - pow(n - 1, 2));
      },
      easeInOutCirc: function (n) {
          return n < 0.5 ? (1 - sqrt(1 - pow(2 * n, 2))) / 2 : (sqrt(1 - pow(-2 * n + 2, 2)) + 1) / 2;
      },
      easeInElastic: function (n) {
          return n === 0 ? 0 : n === 1 ? 1 : -pow(2, 10 * n - 10) * sin((10 * n - 10.75) * s1);
      },
      easeOutElastic: function (n) {
          return n === 0 ? 0 : n === 1 ? 1 : pow(2, -10 * n) * sin((10 * n - 0.75) * s1) + 1;
      },
      easeInOutElastic: function (n) {
          return n === 0 ? 0 : n === 1 ? 1 : n < 0.5
              ? -(pow(2, 20 * n - 10) * sin((20 * n - 11.125) * s2)) / 2
              : pow(2, -20 * n + 10) * sin((20 * n - 11.125) * s2) / 2 + 1;
      },
      easeInBack: function (n) {
          return (c1 + 1) * n * n * n - c1 * n * n;
      },
      easeOutBack: function (n) {
          return 1 + (c1 + 1) * pow(n - 1, 3) + c1 * pow(n - 1, 2);
      },
      easeInOutBack: function (n) {
          return n < 0.5
              ? (pow(2 * n, 2) * ((c2 + 1) * 2 * n - c2)) / 2
              : (pow(2 * n - 2, 2) * ((c2 + 1) * (2 * n - 2) + c2) + 2) / 2;
      },
      easeInBounce: function (n) {
          return 1 - bounceEase(1 - n);
      },
      easeOutBounce: bounceEase,
      easeInOutBounce: function (n) {
          return n < 0.5 ? (1 - bounceEase(1 - 2 * n)) / 2 : (1 + bounceEase(2 * n - 1)) / 2;
      }
  });
});
