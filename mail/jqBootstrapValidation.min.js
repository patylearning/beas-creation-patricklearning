(function($) {
  var validation = {
      options: {
          prependExistingHelpBlock: false,
          sniffHtml: true,
          preventSubmit: true,
          submitError: false,
          submitSuccess: false,
          semanticallyStrict: false,
          autoAdd: { helpBlocks: true },
          filter: function() { return true; }
      },
      
      methods: {
          init: function(options) {
              var settings = $.extend(true, {}, validation);
              settings.options = $.extend(true, settings.options, options);
              
              var forms = $.unique(this.map(function() {
                  return $(this).parents("form")[0];
              }).toArray());
              
              $(forms).on("submit", function(event) {
                  var form = $(this), errorCount = 0;
                  var inputs = form.find("input, textarea, select").not("[type=submit],[type=image]").filter(settings.options.filter);
                  
                  inputs.trigger("submit.validation").trigger("validationLostFocus.validation");
                  
                  inputs.each(function(index, element) {
                      var group = $(element).parents(".control-group").first();
                      if (group.hasClass("warning")) {
                          group.removeClass("warning").addClass("error");
                          errorCount++;
                      }
                  });
                  
                  inputs.trigger("validationLostFocus.validation");
                  
                  if (errorCount) {
                      if (settings.options.preventSubmit) event.preventDefault();
                      form.addClass("error");
                      if ($.isFunction(settings.options.submitError)) {
                          settings.options.submitError(form, event, inputs.jqBootstrapValidation("collectErrors", true));
                      }
                  } else {
                      form.removeClass("error");
                      if ($.isFunction(settings.options.submitSuccess)) {
                          settings.options.submitSuccess(form, event);
                      }
                  }
              });
              
              return this.each(function() {
                  var input = $(this), group = input.parents(".control-group").first(), helpBlock = group.find(".help-block").first(), form = input.parents("form").first();
                  
                  if (!helpBlock.length && settings.options.autoAdd.helpBlocks) {
                      helpBlock = $('<div class="help-block" />');
                      group.find(".controls").append(helpBlock);
                  }
                  
                  input.on("validation.validation", function(event, params) {
                      var value = input.val();
                      var errors = [];
                      
                      $.each(validation.validatorTypes, function(type, validator) {
                          var validators = validator.validate(input, value, validator.init(input, type));
                          if (validators) errors.push(validators);
                      });
                      
                      if (errors.length) {
                          group.removeClass("success").addClass("error");
                          helpBlock.html('<ul role="alert"><li>' + errors.join("</li><li>") + '</li></ul>');
                      } else {
                          group.removeClass("error").addClass("success");
                          helpBlock.html("");
                      }
                  });
              });
          },
          
          destroy: function() {
              return this.each(function() {
                  var input = $(this), group = input.parents(".control-group").first(), helpBlock = group.find(".help-block").first();
                  
                  input.off(".validation");
                  helpBlock.html(helpBlock.data("original-contents"));
                  group.attr("class", group.data("original-classes"));
                  input.attr("aria-invalid", input.data("original-aria-invalid"));
                  
                  if ($.inArray(helpBlock[0], validation.elements) > -1) helpBlock.remove();
              });
          }
      },
      
      validatorTypes: {
          required: {
              name: "required",
              validate: function(input, value) {
                  return value.length === 0 ? "This field is required." : null;
              },
              blockSubmit: true
          },
          email: {
              name: "email",
              validate: function(input, value) {
                  var emailRegex = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/;
                  return !emailRegex.test(value) ? "Not a valid email address." : null;
              }
          },
          number: {
              name: "number",
              validate: function(input, value) {
                  return isNaN(value) ? "Must be a number." : null;
              }
          },
          minlength: {
              name: "minlength",
              validate: function(input, value) {
                  var min = input.data("validationMinlengthMinlength");
                  return value.length < min ? "Must be at least " + min + " characters long." : null;
              }
          },
          maxlength: {
              name: "maxlength",
              validate: function(input, value) {
                  var max = input.data("validationMaxlengthMaxlength");
                  return value.length > max ? "Must be at most " + max + " characters long." : null;
              }
          }
      }
  };
  
  $.fn.jqBootstrapValidation = function(methodOrOptions) {
      if (validation.methods[methodOrOptions]) {
          return validation.methods[methodOrOptions].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof methodOrOptions === 'object' || !methodOrOptions) {
          return validation.methods.init.apply(this, arguments);
      } else {
          $.error('Method ' + methodOrOptions + ' does not exist on jQuery.jqBootstrapValidation');
      }
  };
  
})(jQuery);
